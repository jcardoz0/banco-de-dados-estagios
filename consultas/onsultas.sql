-- --------------------------------- CONSULTAS ----------------------------------------------------

-- Exibe todas as notas cadastradas
SELECT * FROM NOTAS;

-- 1. SELECT , WHERE
-- Estágios que estão em andamento
SELECT * FROM estagios WHERE status = 'Em andamento';

-- Funcionários com salário igual a 4000
SELECT * FROM FUNCIONARIOS WHERE SALARIO = '4000';

-- Históricos com média final superior a 8.5
SELECT * FROM HISTORICOS WHERE MEDIA_FINAL > 8.5;

-- Alunas do sexo feminino do estado de GO
SELECT NOME, SEXO, UF FROM ALUNOS WHERE SEXO = 'F' AND UF = 'GO';

-- Fornecedores de SP com produto 'Computador'
SELECT NOME_EMPRESA, NOME_PRODUTO, UF FROM FORNECEDORES WHERE UF = 'SP' AND NOME_PRODUTO = 'Computador';

-- 2. GROUP BY , ORDER BY
-- Lista de alunos ordenada por nome
SELECT NOME FROM ALUNOS ORDER BY NOME;

-- Notas ordenadas por ID do aluno
SELECT ID_ALUNO, NOTA FROM NOTAS ORDER BY ID_ALUNO ASC;

-- Média de notas por aluno, ordenada
SELECT ID_ALUNO, ROUND(AVG(NOTA), 2) AS MEDIA FROM NOTAS GROUP BY ID_ALUNO ORDER BY MEDIA ASC;

-- Quantidade de matrículas por curso
SELECT ID_CURSO, COUNT(ID_MATRICULA) AS QUANT_MATRICULAS FROM MATRICULAS GROUP BY ID_CURSO;

-- Total de cartas de recomendação por aluno
SELECT ID_ALUNO, COUNT(ID_CARTA_RECOMENDACAO) AS TOTAL_CARTAS FROM CARTA_RECOMENDACAO GROUP BY ID_ALUNO ORDER BY TOTAL_CARTAS DESC;

-- 3. Operadores aritméticos
-- Aumenta o salário dos estagiários em 100
SELECT SALARIO, SALARIO + 100 AS SALARIO_AUMENTADO FROM ESTAGIOS;

-- Soma 1 ponto à média final se menor ou igual a 7
SELECT MEDIA_FINAL, MEDIA_FINAL + 1 AS NOTA FROM HISTORICOS WHERE MEDIA_FINAL <= 7;

-- Subtrai 200 do salário se for 4200
SELECT SALARIO, SALARIO - 200 AS SALARIO FROM FUNCIONARIOS WHERE SALARIO = 4200;

-- Divide salário por 2 para salários acima de 5000
SELECT SALARIO, SALARIO / 2 FROM ESTAGIOS WHERE SALARIO >= 5000;

-- Multiplica salário por 2 para salários abaixo de 2200
SELECT SALARIO, SALARIO * 2 AS SALARIO_MULT FROM ESTAGIOS WHERE SALARIO <= 2200;

-- 4. Operadores relacionais (=, !=, <, >)
-- Funcionários com salário diferente de 4200
SELECT NOME, SALARIO FROM FUNCIONARIOS WHERE SALARIO != 4200;

-- Notas menores que 6
SELECT NOTA, ID_ALUNO FROM NOTAS WHERE NOTA < 6;

-- Matrículas no turno da manhã
SELECT DATA_MATRICULA, TURNO FROM MATRICULAS WHERE TURNO = 'Manhã';

-- Matrículas que não pertencem ao curso 1 ou 4
SELECT ID_CURSO, ID_ALUNO, TURNO FROM MATRICULAS WHERE ID_CURSO != 1 AND ID_CURSO != 4;

-- Salas localizadas no Bloco A
SELECT BLOCO, NUMERO_SALA FROM SALAS WHERE BLOCO = 'Bloco A';

-- 5. Operadores lógicos (AND, OR)
-- Alunos do RJ e do sexo masculino
SELECT NOME FROM ALUNOS WHERE UF = 'RJ' AND SEXO = 'M';

-- Funcionários com salário igual a 3500 ou 4000
SELECT NOME, SALARIO FROM FUNCIONARIOS WHERE SALARIO = 3500 OR SALARIO = 4000;

-- Funcionários com salário maior que 3500 ou menor que 4000
SELECT NOME, SALARIO FROM FUNCIONARIOS WHERE SALARIO > 3500 OR SALARIO < 4000;

-- Cursos com tempo de duração entre '2,5 anos' e '3 anos'
SELECT NOME AS NOME_CURSO, TEMPO_DURACAO FROM CURSOS WHERE TEMPO_DURACAO >= '2,5 anos' AND TEMPO_DURACAO <= '3 anos';

-- 6. Negação
-- Funcionários com salário diferente de 4000
SELECT SALARIO FROM FUNCIONARIOS WHERE NOT SALARIO = 4000;

-- Alunos que não são do sexo masculino
SELECT * FROM ALUNOS WHERE NOT SEXO = 'M';

-- 7. IS NULL, BETWEEN, LIKE, IN
-- Funcionários com salário entre 3500 e 4000
SELECT NOME, SALARIO FROM FUNCIONARIOS WHERE SALARIO BETWEEN 3500 AND 4000;

-- Estágios com salário entre 2000 e 3000
SELECT SALARIO FROM ESTAGIOS WHERE SALARIO BETWEEN 2000 AND 3000;

-- Notas entre 7 e 8
SELECT NOTA, ID_ALUNO FROM NOTAS WHERE NOTA BETWEEN 7 AND 8;

-- Históricos com média entre 7.5 e 9
SELECT MEDIA_FINAL, ID_ALUNO FROM HISTORICOS WHERE MEDIA_FINAL BETWEEN 7.5 AND 9;

-- Funcionários do departamento de Ciência da Computação
SELECT * FROM FUNCIONARIOS WHERE DEPTO IN ('CIENCIA DA COMPUTAÇAO');

-- Fornecedores do estado de SP
SELECT * FROM FORNECEDORES WHERE UF IN ('SP');

-- Fornecedores com nome do produto contendo 'COMPUTADOR'
SELECT * FROM FORNECEDORES WHERE NOME_PRODUTO LIKE '%COMPUTADOR%';

-- Encaminhamentos do tipo estágio
SELECT * FROM ENCAMINHAMENTOS WHERE TIPO_ENCAMINHAMENTO LIKE 'ESTAGIO';

-- Matrículas no turno da manhã
SELECT * FROM MATRICULAS WHERE TURNO LIKE 'MANHA';

-- Coordenadores com ID nulo
SELECT ID_COORDENACAO FROM COORDENACAO WHERE ID_COORDENACAO IS NULL;

-- 8. Funções de agregação (MIN, MAX, COUNT)
-- Funcionário com menor salário
SELECT NOME, SALARIO FROM FUNCIONARIOS WHERE SALARIO = (SELECT MIN(SALARIO) FROM FUNCIONARIOS);

-- Funcionário com maior salário
SELECT NOME, SALARIO FROM FUNCIONARIOS WHERE SALARIO = (SELECT MAX(SALARIO) FROM FUNCIONARIOS);

-- Maior nota
SELECT ID_ALUNO, NOTA FROM NOTAS WHERE NOTA = (SELECT MAX(NOTA) FROM NOTAS);

-- Menor nota
SELECT ID_ALUNO, NOTA FROM NOTAS WHERE NOTA = (SELECT MIN(NOTA) FROM NOTAS);

-- Total de alunos do sexo masculino
SELECT COUNT(*) AS TOTAL_MASCULINOS FROM ALUNOS WHERE SEXO = 'M';

-- 9. Datas: NOW, DATE, YEAR, MONTH
-- Alunos nascidos em dezembro
SELECT NOME, DATA_NACIMENTO FROM ALUNOS WHERE MONTH(DATA_NACIMENTO) = 12;

-- Estágios que começaram em janeiro
SELECT DATA_INICIO FROM ESTAGIOS WHERE MONTH(DATA_INICIO) = 1;

-- Ano de nascimento dos alunos
SELECT NOME, YEAR(DATA_NACIMENTO) AS ANO_NASCIMENTO FROM ALUNOS;

-- Ano de nascimento dos funcionários
SELECT NOME, YEAR(DATA_NASCIMENTO) FROM FUNCIONARIOS;

-- Estágios que terminaram em 20/11/2025
SELECT * FROM ESTAGIOS WHERE DATA_FIM = '2025-11-20';

-- 10. UNION e agrupamentos
-- Nome e data de nascimento/admissão de alunos e funcionários
SELECT NOME, DATA_NACIMENTO AS DATA_REFERENCIA FROM ALUNOS
UNION
SELECT NOME, DATA_ADMISSAO AS DATA_REFERENCIA FROM FUNCIONARIOS;

-- Professores e coordenadores com função
SELECT NOME, 'Professor' AS FUNCAO FROM FUNCIONARIOS WHERE CARGO = 'professor'
UNION
SELECT NOME, 'Coordenador' AS FUNCAO FROM FUNCIONARIOS WHERE CARGO LIKE '%coordenador%';

-- Professores e coordenadores com salário
SELECT NOME, SALARIO, 'Professor' AS TIPO FROM FUNCIONARIOS WHERE CARGO = 'professor'
UNION
SELECT NOME, SALARIO, 'Coordenador' AS TIPO FROM FUNCIONARIOS WHERE CARGO LIKE '%coordenador%';

-- Professores e coordenadores com e-mail
SELECT NOME, EMAIL, 'Professor' AS FUNCAO FROM FUNCIONARIOS WHERE CARGO = 'professor'
UNION
SELECT NOME, EMAIL, 'Coordenador' AS FUNCAO FROM FUNCIONARIOS WHERE CARGO LIKE '%coordenador%';

-- Nomes de alunos e funcionários
SELECT NOME AS NOME_PESSOA FROM ALUNOS
UNION
SELECT NOME FROM FUNCIONARIOS;

-- 11. JOINs
-- Nome dos alunos e seu turno
SELECT A.NOME AS NOME_ALUNO, M.TURNO AS TURNO FROM MATRICULAS M JOIN ALUNOS A ON M.ID_MATRICULA = A.ID_ALUNO;

-- Professores e suas respectivas salas
SELECT F.NOME AS PROFESSORES, S.ID_SALA, S.BLOCO FROM SALAS S JOIN FUNCIONARIOS F ON S.ID_SALA = F.ID_FUNCIONARIO;

-- Alunos com suas notas e o professor
SELECT A.NOME AS ALUNO, N.NOTA AS NOTA, N.ID_FUNCIONARIO AS PROFESSOR FROM NOTAS N JOIN ALUNOS A ON N.ID_NOTA = A.ID_ALUNO;

-- Encaminhamentos com nome do aluno e empresa
SELECT A.NOME AS ALUNOS, E.TIPO_ENCAMINHAMENTO AS CAMINHAMENTO, F.NOME_EMPRESA AS EMPRESA 
FROM ALUNOS A 
JOIN ENCAMINHAMENTOS E ON A.ID_ALUNO = E.ID_ALUNO 
JOIN FORNECEDORES F ON E.ID_FORNECEDOR = F.ID_FORNECEDOR;

-- Estágios com dados do aluno e orientador
SELECT A.NOME AS ALUNO, F.NOME AS ORIENTADOR, E.SALARIO, E.DATA_INICIO, E.DATA_FIM, E.STATUS
 FROM ESTAGIOS E
 JOIN ALUNOS A ON E.ID_ALUNO = A.ID_ALUNO 
 JOIN FUNCIONARIOS F ON E.ID_FUNCIONARIO = F.ID_FUNCIONARIO;

-- Estágios e média de notas dos alunos
SELECT A.NOME AS NOME_ALUNO, E.STATUS AS STATUS_ESTAGIO, E.SALARIO AS SALARIO_ESTAGIO, F.NOME AS ORIENTADOR_ESTAGIO, AVG(N.NOTA) AS MEDIA_NOTAS_ALUNO
 FROM ESTAGIOS AS E
 JOIN ALUNOS AS A ON E.ID_ALUNO = A.ID_ALUNO
 JOIN FUNCIONARIOS AS F ON E.ID_FUNCIONARIO = F.ID_FUNCIONARIO 
 LEFT JOIN NOTAS AS N ON A.ID_ALUNO = N.ID_ALUNO GROUP BY A.NOME, E.STATUS, E.SALARIO, F.NOME ORDER BY MEDIA_NOTAS_ALUNO DESC;

-- Taxa de sucesso de encaminhamento por curso
SELECT C.NOME AS NOME_CURSO, COUNT(DISTINCT M.ID_ALUNO) AS TOTAL_ALUNOS_MATRICULADOS, 
COUNT(DISTINCT ENC.ID_ALUNO) AS TOTAL_ALUNOS_ENCAMINHADOS,
 (COUNT(DISTINCT ENC.ID_ALUNO) * 100.0 / COUNT(DISTINCT M.ID_ALUNO)) AS TAXA_SUCESSO_ENCAMINHAMENTO 
 FROM CURSOS AS C JOIN MATRICULAS AS M ON C.ID_CURSO = M.ID_CURSO
 LEFT JOIN ALUNOS AS A ON M.ID_ALUNO = A.ID_ALUNO
 LEFT JOIN ENCAMINHAMENTOS AS ENC ON A.ID_ALUNO = ENC.ID_ALUNO GROUP BY C.NOME ORDER BY TAXA_SUCESSO_ENCAMINHAMENTO DESC;